CREATE OR REPLACE PROCEDURE STUDENT_PROCEDURE(VNO IN STUDENT.NO%TYPE, VPRICE IN STUDENT.PRICE%TYPE, VMESSAGE OUT VARCHAR2)
IS
    VSTUDENT_RT STUDENT%ROWTYPE;
BEGIN
     UPDATE STUDENT 
     SET PRICE = PRICE + VPRICE WHERE NO = VNO;
     commit;
     SELECT * INTO VSTUDENT_RT FROM STUDENT WHERE NO = VNO;
     VMESSAGE := VSTUDENT_RT.NO||' 번호의 인상금액은 ' || VPRICE ||'이고 총 금액은'||VSTUDENT_RT.PRICE||'입니다.'; 
     DBMS_OUTPUT.PUT_LINE(VMESSAGE);
     exception when no_data_found then null; when others then  null;
END;
/
VARIABLE MESSAGE VARCHAR2(200);
EXECUTE STUDENT_PROCEDURE(1,10000,:MESSAGE);

SELECT * FROM STUDENT;

-- Function
CREATE OR REPLACE FUNCTION STUDENT_FUNCTION
    (VNO IN STUDENT.NO%TYPE)
    RETURN VARCHAR2
IS
    VSTUDENT_RT STUDENT%ROWTYPE;
    VMESSAGE VARCHAR2(100);
BEGIN
--     UPDATE BOOKS 
--     SET PRICE = PRICE + VPRICE WHERE ID = VID;
--     commit;
     SELECT * INTO VSTUDENT_RT FROM STUDENT WHERE NO = VNO;
     VMESSAGE := VSTUDENT_RT.NO||' 번호의 총 금액은'||VSTUDENT_RT.PRICE||'입니다.'; 
     RETURN VMESSAGE;
END;
/

SELECT STUDENT_FUNCTION(2) FROM DUAL;

-- Trigger
CREATE OR REPLACE TRIGGER STUDENT_TRIGGER
BEFORE INSERT OR UPDATE ON STUDENT
FOR EACH ROW

BEGIN
    :NEW.TOT := :NEW.KOR + :NEW.ENG + :NEW.MAT;
    :NEW.AVR := ROUND((:NEW.KOR + :NEW.ENG + :NEW.MAT)/3,1);
END;
/


